/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application;

import Loader.Website;
import java.io.*;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import Loader.Graph;
import Loader.Vertex;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Pete
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    DecimalFormat df = new DecimalFormat("#.##");
    ArrayList<Website> webList = new ArrayList<>();
    ArrayList<Website>[] spanningTrees;//array of spanning trees
    Graph[] graphs = new Graph[5];//array of graphs(max size 5 because I started with 5 base urls)

    public GUI() throws FileNotFoundException, IOException, ClassNotFoundException {
        initComponents();
        this.makeList();//create list
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sourceList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        destinationList = new javax.swing.JList<>();
        pathButton = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pathOutput = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sourceList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sourceListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sourceList);

        jScrollPane2.setViewportView(destinationList);

        pathButton.setText("Find Path");
        pathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose a source");

        jLabel2.setText("Choose a destination");

        pathOutput.setColumns(20);
        pathOutput.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pathOutput.setRows(5);
        jScrollPane3.setViewportView(pathOutput);

        jLabel3.setText("Graph");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathButton, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(85, 85, 85))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(pathButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sourceListMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_sourceListMouseClicked

    private void pathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathButtonActionPerformed
        // get indexes from list
        int s = sourceList.getSelectedIndex();
        int d = destinationList.getSelectedIndex();
        Graph g = null;
        Website source = null;
        Website dest = null;
        boolean selected = false;
        //if havent selcted from list
        if (s == -1 || d == -1) {
            pathOutput.setText("[Error] Please select a website from both lists");
        } else {
            //get websites from list
            selected = true;
            source = webList.get(s);
            dest = webList.get(d);
        }
        if (selected) {
            //check to see if they are in the same spanning tree
            boolean inTree = false;
            for (Graph graph : graphs) {
                if (graph.webList.contains(source) && graph.webList.contains(dest)) {
                    inTree = true;
                    g = graph;
                }
            }
            if (inTree) {
                if (source != dest) {
                    //clear text
                    List<Website> path;
                    pathOutput.setText("");
                    //get path
                    path = g.Dijkstra(source, dest);
                    char[] spaces = new char[20];
                    Arrays.fill(spaces, ' ');
                    //add source website
                    pathOutput.append(new String(spaces) + "---------------START---------------" + "\n");
                    if (source.mediod) {
                        pathOutput.append("MEDIOD: " + source.title + "\n");
                    } else {
                        pathOutput.append(source.title + "\n");
                    }
                    pathOutput.append(new String(spaces) + "Cost:" + df.format(this.getCost(source, path.get(path.size() - 1))) + "\n");
                    //add path
                    for (int i = path.size() - 1; i > 0; i--) {
                        if (path.get(i).mediod) {
                            pathOutput.append("MEDIOD: " + path.get(i).title + "\n");
                        } else {
                            pathOutput.append(path.get(i).title + "\n");
                        }
                        pathOutput.append(new String(spaces) + "Cost: " + df.format(this.getCost(path.get(i), path.get(i - 1))) + "\n");
                    }
                    //add destination
                    if (path.get(0).mediod) {
                        pathOutput.append("MEDIOD: " + path.get(0).title + "\n");
                    } else {
                        pathOutput.append(path.get(0).title + "\n");
                    }
                    pathOutput.append(new String(spaces) + "----------------END----------------");
                } else {
                    pathOutput.setText("[Error] Websites are matching");
                }
            } else {
                pathOutput.setText("[Error] Websites are not in same spanning tree");
            }
        }
    }//GEN-LAST:event_pathButtonActionPerformed

    void makeList() throws FileNotFoundException, IOException, ClassNotFoundException {
        //get graphs from file
        FileInputStream fileIn = new FileInputStream("graphs.ser");
        ObjectInputStream in = new ObjectInputStream(fileIn);
        graphs = (Graph[]) in.readObject();

        //make lists
        DefaultListModel d = new DefaultListModel();
        int num = 1;
        //for each graph add all websites to the list
        for (int i = 0; i < graphs.length; i++) {
            Graph g = graphs[i];
            if (g.webList.isEmpty()) {
                break;
            }
            d.addElement("----------------------SPANNING TREE: " + (i + 1) + " ----------------------");
            this.webList.add(null);
            for (Website w : g.webList) {
                d.addElement(w.title);
                this.webList.add(w);
            }
        }
        //initialize the lists
        sourceList.setModel(d);
        destinationList.setModel(d);
    }

    double getCost(Website w1, Website w2) {

        double similarity = 0;
        for (String s : w1.topWords) {
            //add both word frequencies to their frequncy lists
            int inputCount = w1.topWordsFreq.get(w1.topWords.indexOf(s));
            int testCount;
            if (w2.topWords.contains(s)) {
                testCount = w2.topWordsFreq.get(w2.topWords.indexOf(s));
            } else {
                //else add 1(can't use 0 because we dont want to divide by all 0's)
                testCount = 1;
            }
            w1.frequencyList.add(inputCount);
            w2.frequencyList.add(testCount);

        }
        similarity = cosineSimilarity(w1.frequencyList, w2.frequencyList);
        w1.frequencyList.clear();
        w2.frequencyList.clear();
        //return 1 - the similarity because the closer to 1 the more similar but we are trying to find least cost
        return 1 - similarity;
    }

    double cosineSimilarity(ArrayList<Integer> list1, ArrayList<Integer> list2) {
        double dotProduct = 0.0;
        double magnitude1 = 0.0;
        double magnitude2 = 0.0;

        for (int i = 0; i < list1.size() - 1; i++) {
            //for each word get the two frequencies
            //compute dot product and add to total
            dotProduct += (list1.get(i) * list2.get(i));
            //add the frequencies to their total
            magnitude1 += Math.pow(list1.get(i), 2);
            magnitude2 += Math.pow(list2.get(i), 2);
        }
        //take the sums and get the cosine simlilarity
        return dotProduct / ((Math.sqrt(magnitude1) * Math.sqrt(magnitude2)));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> destinationList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton pathButton;
    private javax.swing.JTextArea pathOutput;
    private javax.swing.JList<String> sourceList;
    // End of variables declaration//GEN-END:variables
}
